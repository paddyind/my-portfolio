import express from 'express';
import cors from 'cors';
import db from './database.js';
import ollama from 'ollama';

const app = express();
const port = process.env.PORT || 3001;

app.use(cors());
app.use(express.json());

app.get('/', (req, res) => {
  res.send('Server is running!');
});

// API routes
// Learnings
app.get('/api/learnings', async (req, res) => {
  const learnings = await db.all('SELECT * FROM learnings');
  res.json(learnings);
});

// Interviews
app.get('/api/interviews', async (req, res) => {
  const interviews = await db.all('SELECT * FROM interviews');
  res.json(interviews);
});

// Preparation Scenarios
app.get('/api/preparation-scenarios', async (req, res) => {
  const scenarios = await db.all('SELECT * FROM preparation_scenarios');
  res.json(scenarios);
});

// POST routes for creating new items
app.post('/api/learnings', async (req, res) => {
  const { topic, category, status, notes } = req.body;
  const result = await db.run('INSERT INTO learnings (topic, category, status, notes) VALUES (?, ?, ?, ?)', topic, category, status, notes);
  res.status(201).json({ id: result.lastID });
});

app.post('/api/interviews', async (req, res) => {
  const { question, answer, difficulty, category } = req.body;
  const result = await db.run('INSERT INTO interviews (question, answer, difficulty, category) VALUES (?, ?, ?, ?)', question, answer, difficulty, category);
  res.status(201).json({ id: result.lastID });
});

// Endpoint for generating new scenarios
app.post('/api/preparation-scenarios/generate', async (req, res) => {
  try {
    const response = await ollama.chat({
      model: 'llama2',
      messages: [{ role: 'user', content: 'Generate a leadership scenario in the STAR format (Situation, Task, Action, Result).' }],
    });

    // Assuming the response from Ollama is a single string with the scenario.
    // You might need to parse this if the format is more complex.
    const scenarioContent = response.message.content;

    const newScenario = {
      scenario: scenarioContent,
      topic: 'Generated by Ollama' // Or you could try to extract a topic from the response
    };

    const result = await db.run('INSERT INTO preparation_scenarios (scenario, topic) VALUES (?, ?)', newScenario.scenario, newScenario.topic);
    const createdScenario = await db.get('SELECT * FROM preparation_scenarios WHERE id = ?', result.lastID);
    res.status(201).json(createdScenario);
  } catch (error) {
    console.error('Error generating scenario with Ollama:', error);
    res.status(500).json({ error: 'Failed to generate new scenario' });
  }
});

// PUT routes for updating items
app.put('/api/learnings/:id', async (req, res) => {
  const { topic, category, status, notes } = req.body;
  await db.run('UPDATE learnings SET topic = ?, category = ?, status = ?, notes = ? WHERE id = ?', topic, category, status, notes, req.params.id);
  res.status(200).json({ message: 'Learning updated successfully' });
});

app.put('/api/interviews/:id', async (req, res) => {
  const { question, answer, difficulty, category } = req.body;
  await db.run('UPDATE interviews SET question = ?, answer = ?, difficulty = ?, category = ? WHERE id = ?', question, answer, difficulty, category, req.params.id);
  res.status(200).json({ message: 'Interview updated successfully' });
});

// DELETE routes for deleting items
app.delete('/api/learnings/:id', async (req, res) => {
  await db.run('DELETE FROM learnings WHERE id = ?', req.params.id);
  res.status(200).json({ message: 'Learning deleted successfully' });
});

app.delete('/api/interviews/:id', async (req, res) => {
  await db.run('DELETE FROM interviews WHERE id = ?', req.params.id);
  res.status(200).json({ message: 'Interview deleted successfully' });
});

app.listen(port, () => {
  console.log(`Server listening on port ${port}`);
});